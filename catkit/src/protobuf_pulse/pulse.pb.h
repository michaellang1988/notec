// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2eproto;
class AcquireSine;
class AcquireSineDefaultTypeInternal;
extern AcquireSineDefaultTypeInternal _AcquireSine_default_instance_;
class Drag;
class DragDefaultTypeInternal;
extern DragDefaultTypeInternal _Drag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AcquireSine* Arena::CreateMaybeMessage<::AcquireSine>(Arena*);
template<> ::Drag* Arena::CreateMaybeMessage<::Drag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Drag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Drag) */ {
 public:
  inline Drag() : Drag(nullptr) {};
  virtual ~Drag();

  Drag(const Drag& from);
  Drag(Drag&& from) noexcept
    : Drag() {
    *this = ::std::move(from);
  }

  inline Drag& operator=(const Drag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Drag& operator=(Drag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Drag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Drag* internal_default_instance() {
    return reinterpret_cast<const Drag*>(
               &_Drag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Drag& a, Drag& b) {
    a.Swap(&b);
  }
  inline void Swap(Drag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Drag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Drag* New() const final {
    return CreateMaybeMessage<Drag>(nullptr);
  }

  Drag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Drag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Drag& from);
  void MergeFrom(const Drag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Drag";
  }
  protected:
  explicit Drag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2eproto);
    return ::descriptor_table_pulse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 9,
    kTimeFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kAmpFieldNumber = 3,
    kDetuneFieldNumber = 4,
    kFreqFieldNumber = 5,
    kPhaseFieldNumber = 6,
    kAlphaFieldNumber = 7,
    kDeltaFieldNumber = 8,
    kExtraBiasFieldNumber = 10,
  };
  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // float offset = 2;
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // float amp = 3;
  void clear_amp();
  float amp() const;
  void set_amp(float value);
  private:
  float _internal_amp() const;
  void _internal_set_amp(float value);
  public:

  // float detune = 4;
  void clear_detune();
  float detune() const;
  void set_detune(float value);
  private:
  float _internal_detune() const;
  void _internal_set_detune(float value);
  public:

  // float freq = 5;
  void clear_freq();
  float freq() const;
  void set_freq(float value);
  private:
  float _internal_freq() const;
  void _internal_set_freq(float value);
  public:

  // float phase = 6;
  void clear_phase();
  float phase() const;
  void set_phase(float value);
  private:
  float _internal_phase() const;
  void _internal_set_phase(float value);
  public:

  // float alpha = 7;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float delta = 8;
  void clear_delta();
  float delta() const;
  void set_delta(float value);
  private:
  float _internal_delta() const;
  void _internal_set_delta(float value);
  public:

  // float extra_bias = 10;
  void clear_extra_bias();
  float extra_bias() const;
  void set_extra_bias(float value);
  private:
  float _internal_extra_bias() const;
  void _internal_set_extra_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:Drag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float time_;
  float offset_;
  float amp_;
  float detune_;
  float freq_;
  float phase_;
  float alpha_;
  float delta_;
  float extra_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2eproto;
};
// -------------------------------------------------------------------

class AcquireSine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcquireSine) */ {
 public:
  inline AcquireSine() : AcquireSine(nullptr) {};
  virtual ~AcquireSine();

  AcquireSine(const AcquireSine& from);
  AcquireSine(AcquireSine&& from) noexcept
    : AcquireSine() {
    *this = ::std::move(from);
  }

  inline AcquireSine& operator=(const AcquireSine& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquireSine& operator=(AcquireSine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcquireSine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcquireSine* internal_default_instance() {
    return reinterpret_cast<const AcquireSine*>(
               &_AcquireSine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AcquireSine& a, AcquireSine& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquireSine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquireSine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcquireSine* New() const final {
    return CreateMaybeMessage<AcquireSine>(nullptr);
  }

  AcquireSine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcquireSine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcquireSine& from);
  void MergeFrom(const AcquireSine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquireSine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcquireSine";
  }
  protected:
  explicit AcquireSine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2eproto);
    return ::descriptor_table_pulse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmpListFieldNumber = 2,
    kBasebandFreqListFieldNumber = 3,
    kNameFieldNumber = 4,
    kTimeFieldNumber = 1,
    kExtraBiasFieldNumber = 5,
  };
  // repeated float amp_list = 2;
  int amp_list_size() const;
  private:
  int _internal_amp_list_size() const;
  public:
  void clear_amp_list();
  private:
  float _internal_amp_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_amp_list() const;
  void _internal_add_amp_list(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_amp_list();
  public:
  float amp_list(int index) const;
  void set_amp_list(int index, float value);
  void add_amp_list(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      amp_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_amp_list();

  // repeated float baseband_freq_list = 3;
  int baseband_freq_list_size() const;
  private:
  int _internal_baseband_freq_list_size() const;
  public:
  void clear_baseband_freq_list();
  private:
  float _internal_baseband_freq_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_baseband_freq_list() const;
  void _internal_add_baseband_freq_list(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_baseband_freq_list();
  public:
  float baseband_freq_list(int index) const;
  void set_baseband_freq_list(int index, float value);
  void add_baseband_freq_list(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      baseband_freq_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_baseband_freq_list();

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // float extra_bias = 5;
  void clear_extra_bias();
  float extra_bias() const;
  void set_extra_bias(float value);
  private:
  float _internal_extra_bias() const;
  void _internal_set_extra_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:AcquireSine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > amp_list_;
  mutable std::atomic<int> _amp_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > baseband_freq_list_;
  mutable std::atomic<int> _baseband_freq_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float time_;
  float extra_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Drag

// float time = 1;
inline void Drag::clear_time() {
  time_ = 0;
}
inline float Drag::_internal_time() const {
  return time_;
}
inline float Drag::time() const {
  // @@protoc_insertion_point(field_get:Drag.time)
  return _internal_time();
}
inline void Drag::_internal_set_time(float value) {
  
  time_ = value;
}
inline void Drag::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Drag.time)
}

// float offset = 2;
inline void Drag::clear_offset() {
  offset_ = 0;
}
inline float Drag::_internal_offset() const {
  return offset_;
}
inline float Drag::offset() const {
  // @@protoc_insertion_point(field_get:Drag.offset)
  return _internal_offset();
}
inline void Drag::_internal_set_offset(float value) {
  
  offset_ = value;
}
inline void Drag::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Drag.offset)
}

// float amp = 3;
inline void Drag::clear_amp() {
  amp_ = 0;
}
inline float Drag::_internal_amp() const {
  return amp_;
}
inline float Drag::amp() const {
  // @@protoc_insertion_point(field_get:Drag.amp)
  return _internal_amp();
}
inline void Drag::_internal_set_amp(float value) {
  
  amp_ = value;
}
inline void Drag::set_amp(float value) {
  _internal_set_amp(value);
  // @@protoc_insertion_point(field_set:Drag.amp)
}

// float detune = 4;
inline void Drag::clear_detune() {
  detune_ = 0;
}
inline float Drag::_internal_detune() const {
  return detune_;
}
inline float Drag::detune() const {
  // @@protoc_insertion_point(field_get:Drag.detune)
  return _internal_detune();
}
inline void Drag::_internal_set_detune(float value) {
  
  detune_ = value;
}
inline void Drag::set_detune(float value) {
  _internal_set_detune(value);
  // @@protoc_insertion_point(field_set:Drag.detune)
}

// float freq = 5;
inline void Drag::clear_freq() {
  freq_ = 0;
}
inline float Drag::_internal_freq() const {
  return freq_;
}
inline float Drag::freq() const {
  // @@protoc_insertion_point(field_get:Drag.freq)
  return _internal_freq();
}
inline void Drag::_internal_set_freq(float value) {
  
  freq_ = value;
}
inline void Drag::set_freq(float value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:Drag.freq)
}

// float phase = 6;
inline void Drag::clear_phase() {
  phase_ = 0;
}
inline float Drag::_internal_phase() const {
  return phase_;
}
inline float Drag::phase() const {
  // @@protoc_insertion_point(field_get:Drag.phase)
  return _internal_phase();
}
inline void Drag::_internal_set_phase(float value) {
  
  phase_ = value;
}
inline void Drag::set_phase(float value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:Drag.phase)
}

// float alpha = 7;
inline void Drag::clear_alpha() {
  alpha_ = 0;
}
inline float Drag::_internal_alpha() const {
  return alpha_;
}
inline float Drag::alpha() const {
  // @@protoc_insertion_point(field_get:Drag.alpha)
  return _internal_alpha();
}
inline void Drag::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void Drag::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Drag.alpha)
}

// float delta = 8;
inline void Drag::clear_delta() {
  delta_ = 0;
}
inline float Drag::_internal_delta() const {
  return delta_;
}
inline float Drag::delta() const {
  // @@protoc_insertion_point(field_get:Drag.delta)
  return _internal_delta();
}
inline void Drag::_internal_set_delta(float value) {
  
  delta_ = value;
}
inline void Drag::set_delta(float value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Drag.delta)
}

// string name = 9;
inline void Drag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Drag::name() const {
  // @@protoc_insertion_point(field_get:Drag.name)
  return _internal_name();
}
inline void Drag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Drag.name)
}
inline std::string* Drag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Drag.name)
  return _internal_mutable_name();
}
inline const std::string& Drag::_internal_name() const {
  return name_.Get();
}
inline void Drag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Drag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Drag.name)
}
inline void Drag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Drag.name)
}
inline void Drag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Drag.name)
}
inline std::string* Drag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Drag::release_name() {
  // @@protoc_insertion_point(field_release:Drag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Drag.name)
}
inline std::string* Drag::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Drag.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Drag::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Drag.name)
}

// float extra_bias = 10;
inline void Drag::clear_extra_bias() {
  extra_bias_ = 0;
}
inline float Drag::_internal_extra_bias() const {
  return extra_bias_;
}
inline float Drag::extra_bias() const {
  // @@protoc_insertion_point(field_get:Drag.extra_bias)
  return _internal_extra_bias();
}
inline void Drag::_internal_set_extra_bias(float value) {
  
  extra_bias_ = value;
}
inline void Drag::set_extra_bias(float value) {
  _internal_set_extra_bias(value);
  // @@protoc_insertion_point(field_set:Drag.extra_bias)
}

// -------------------------------------------------------------------

// AcquireSine

// float time = 1;
inline void AcquireSine::clear_time() {
  time_ = 0;
}
inline float AcquireSine::_internal_time() const {
  return time_;
}
inline float AcquireSine::time() const {
  // @@protoc_insertion_point(field_get:AcquireSine.time)
  return _internal_time();
}
inline void AcquireSine::_internal_set_time(float value) {
  
  time_ = value;
}
inline void AcquireSine::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:AcquireSine.time)
}

// repeated float amp_list = 2;
inline int AcquireSine::_internal_amp_list_size() const {
  return amp_list_.size();
}
inline int AcquireSine::amp_list_size() const {
  return _internal_amp_list_size();
}
inline void AcquireSine::clear_amp_list() {
  amp_list_.Clear();
}
inline float AcquireSine::_internal_amp_list(int index) const {
  return amp_list_.Get(index);
}
inline float AcquireSine::amp_list(int index) const {
  // @@protoc_insertion_point(field_get:AcquireSine.amp_list)
  return _internal_amp_list(index);
}
inline void AcquireSine::set_amp_list(int index, float value) {
  amp_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcquireSine.amp_list)
}
inline void AcquireSine::_internal_add_amp_list(float value) {
  amp_list_.Add(value);
}
inline void AcquireSine::add_amp_list(float value) {
  _internal_add_amp_list(value);
  // @@protoc_insertion_point(field_add:AcquireSine.amp_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AcquireSine::_internal_amp_list() const {
  return amp_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AcquireSine::amp_list() const {
  // @@protoc_insertion_point(field_list:AcquireSine.amp_list)
  return _internal_amp_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AcquireSine::_internal_mutable_amp_list() {
  return &amp_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AcquireSine::mutable_amp_list() {
  // @@protoc_insertion_point(field_mutable_list:AcquireSine.amp_list)
  return _internal_mutable_amp_list();
}

// repeated float baseband_freq_list = 3;
inline int AcquireSine::_internal_baseband_freq_list_size() const {
  return baseband_freq_list_.size();
}
inline int AcquireSine::baseband_freq_list_size() const {
  return _internal_baseband_freq_list_size();
}
inline void AcquireSine::clear_baseband_freq_list() {
  baseband_freq_list_.Clear();
}
inline float AcquireSine::_internal_baseband_freq_list(int index) const {
  return baseband_freq_list_.Get(index);
}
inline float AcquireSine::baseband_freq_list(int index) const {
  // @@protoc_insertion_point(field_get:AcquireSine.baseband_freq_list)
  return _internal_baseband_freq_list(index);
}
inline void AcquireSine::set_baseband_freq_list(int index, float value) {
  baseband_freq_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:AcquireSine.baseband_freq_list)
}
inline void AcquireSine::_internal_add_baseband_freq_list(float value) {
  baseband_freq_list_.Add(value);
}
inline void AcquireSine::add_baseband_freq_list(float value) {
  _internal_add_baseband_freq_list(value);
  // @@protoc_insertion_point(field_add:AcquireSine.baseband_freq_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AcquireSine::_internal_baseband_freq_list() const {
  return baseband_freq_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AcquireSine::baseband_freq_list() const {
  // @@protoc_insertion_point(field_list:AcquireSine.baseband_freq_list)
  return _internal_baseband_freq_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AcquireSine::_internal_mutable_baseband_freq_list() {
  return &baseband_freq_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AcquireSine::mutable_baseband_freq_list() {
  // @@protoc_insertion_point(field_mutable_list:AcquireSine.baseband_freq_list)
  return _internal_mutable_baseband_freq_list();
}

// string name = 4;
inline void AcquireSine::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcquireSine::name() const {
  // @@protoc_insertion_point(field_get:AcquireSine.name)
  return _internal_name();
}
inline void AcquireSine::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:AcquireSine.name)
}
inline std::string* AcquireSine::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AcquireSine.name)
  return _internal_mutable_name();
}
inline const std::string& AcquireSine::_internal_name() const {
  return name_.Get();
}
inline void AcquireSine::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcquireSine::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcquireSine.name)
}
inline void AcquireSine::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcquireSine.name)
}
inline void AcquireSine::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcquireSine.name)
}
inline std::string* AcquireSine::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcquireSine::release_name() {
  // @@protoc_insertion_point(field_release:AcquireSine.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcquireSine::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcquireSine.name)
}
inline std::string* AcquireSine::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AcquireSine.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AcquireSine::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AcquireSine.name)
}

// float extra_bias = 5;
inline void AcquireSine::clear_extra_bias() {
  extra_bias_ = 0;
}
inline float AcquireSine::_internal_extra_bias() const {
  return extra_bias_;
}
inline float AcquireSine::extra_bias() const {
  // @@protoc_insertion_point(field_get:AcquireSine.extra_bias)
  return _internal_extra_bias();
}
inline void AcquireSine::_internal_set_extra_bias(float value) {
  
  extra_bias_ = value;
}
inline void AcquireSine::set_extra_bias(float value) {
  _internal_set_extra_bias(value);
  // @@protoc_insertion_point(field_set:AcquireSine.extra_bias)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2eproto
